import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from dataset import df, df_rec_mensal
from utils import format_number
from graficos import GraficoVendas, grafico_re_venda_por_dia
from previsoes import (
    previsao_lstm, previsao_mlp, previsao_reg_linear,
    rmse_lstm_reais, rmse_mlp_reais, rmse_lr_reais
)

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Dashboard de Vendas",
    page_icon=":shopping_trolley:",
    layout="wide"
)

# T√≠tulo principal
st.title("Dashboard de An√°lise de Vendas :shopping_trolley:")

# Criando as abas
aba1, aba2, aba3, aba4, aba5 = st.tabs([
    "üìä Visualiza√ß√£o de Dados",
    "üìà An√°lise de Receita",
    "üí∞ An√°lise de Pre√ßos",
    "ü§ñ Previs√µes com IA",
    "üìâ Compara√ß√£o de Modelos"
])

# Aba 1 - Visualiza√ß√£o de dados
with aba1:
    st.header("Dados Completos de Vendas")
    st.dataframe(df.sort_values('Data', ascending=False), height=500)
    
    with st.expander("üîç Sobre os dados"):
        st.markdown("""
        - **Data**: Data da venda
        - **Preco_R$**: Pre√ßo do algod√£o em Reais
        - **Quantidade**: Quantidade vendida
        """)

# Aba 2 - An√°lise de receita
with aba2:
    st.header("An√°lise de Receita Mensal")
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric(
            label="Receita Total", 
            value=format_number(df['Preco_R$'].sum(), 'R$'))
    with col2:
        st.metric(
            label="Total de Vendas", 
            value=format_number(df.shape[0]))
    
    # Gr√°fico de receita mensal
    grafico_vendas = GraficoVendas(df_rec_mensal)
    fig_receita = grafico_vendas.grafico_receita_mensal()
    st.plotly_chart(fig_receita, use_container_width=True)

# Aba 3 - An√°lise de pre√ßos
with aba3:
    st.header("An√°lise Hist√≥rica de Pre√ßos")
    
    preco_max = df.loc[df['Preco_R$'].idxmax()]
    preco_min = df.loc[df['Preco_R$'].idxmin()]
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric(
            label="Pre√ßo M√°ximo Hist√≥rico", 
            value=format_number(preco_max['Preco_R$'], 'R$'),
            delta=preco_max['Data'].strftime('%d/%m/%Y'))
    with col2:
        st.metric(
            label="Pre√ßo M√≠nimo Hist√≥rico", 
            value=format_number(preco_min['Preco_R$'], 'R$'),
            delta=preco_min['Data'].strftime('%d/%m/%Y'))
    
    # Gr√°fico de evolu√ß√£o de pre√ßos
    fig_precos = px.line(
        df, 
        x='Data', 
        y='Preco_R$',
        title="Evolu√ß√£o do Pre√ßo do Algod√£o",
        labels={'Preco_R$': 'Pre√ßo (R$)', 'Data': 'Data'}
    )
    st.plotly_chart(fig_precos, use_container_width=True)
    
    # Gr√°fico adicional de vendas por dia
    st.plotly_chart(grafico_re_venda_por_dia, use_container_width=True)

# Aba 4 - Previs√µes com IA
with aba4:
    st.header("Previs√µes de Pre√ßo com Intelig√™ncia Artificial")
    
    st.info("""
    Os modelos abaixo foram treinados para prever o pr√≥ximo pre√ßo do algod√£o
    com base nos dados hist√≥ricos. O RMSE indica o erro m√©dio em Reais.
    """)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("Rede Neural LSTM")
        previsao = previsao_lstm()
        st.metric(
            label="Pr√≥xima Previs√£o", 
            value=format_number(previsao, 'R$'))
        st.metric(
            label="Erro M√©dio (RMSE)", 
            value=format_number(rmse_lstm_reais, 'R$'))
        
    with col2:
        st.subheader("Rede Neural MLP")
        previsao = previsao_mlp()
        st.metric(
            label="Pr√≥xima Previs√£o", 
            value=format_number(previsao, 'R$'))
        st.metric(
            label="Erro M√©dio (RMSE)", 
            value=format_number(rmse_mlp_reais, 'R$'))
        
    with col3:
        st.subheader("Regress√£o Linear")
        previsao = previsao_reg_linear()
        st.metric(
            label="Pr√≥xima Previs√£o", 
            value=format_number(previsao, 'R$'))
        st.metric(
            label="Erro M√©dio (RMSE)", 
            value=format_number(rmse_lr_reais, 'R$'))
    
    with st.expander("üìö Sobre os modelos"):
        st.markdown("""
        - **LSTM**: Rede neural especializada em s√©ries temporais
        - **MLP**: Rede neural tradicional para problemas gen√©ricos
        - **Regress√£o Linear**: Modelo estat√≠stico b√°sico como refer√™ncia
        """)

# Aba 5 - Compara√ß√£o de modelos
with aba5:
    st.header("Compara√ß√£o de Desempenho dos Modelos")
    
    # Dados para o gr√°fico
    modelos = ['LSTM', 'MLP', 'Regress√£o Linear']
    erros = [rmse_lstm_reais, rmse_mlp_reais, rmse_lr_reais]
    
    # Criando o gr√°fico de barras
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=modelos,
        y=erros,
        text=[f'R${erro:.2f}' for erro in erros],
        textposition='auto',
        marker_color=['#636EFA', '#EF553B', '#00CC96']
    ))
    
    fig.update_layout(
        title='Erro M√©dio (RMSE) em Reais',
        xaxis_title='Modelos',
        yaxis_title='Erro M√©dio (R$)',
        template='plotly_white'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise comparativa
    melhor_modelo = modelos[np.argmin(erros)]
    st.success(f"‚úÖ O modelo com melhor desempenho foi: **{melhor_modelo}**")
    
    with st.expander("üìù Interpreta√ß√£o dos resultados"):
        st.markdown("""
        - **RMSE (Root Mean Squared Error)**: 
          Indica o erro m√©dio das previs√µes em Reais.
          Quanto menor, melhor o modelo.
        - Compara√ß√£o direta entre abordagens diferentes.
        - Valores em R$ permitem an√°lise pr√°tica do impacto.
        """)

# Rodap√©
st.divider()
st.caption("Dashboard desenvolvido para an√°lise de vendas - ¬© 2025")